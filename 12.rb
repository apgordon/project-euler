=begin 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=end 

@solved = false 
@n = 100

# Calculate triangle number given n rows/height
def generate_triangle_number(n)
    triangle_number = 0
    i = n
    until i == 0 
        triangle_number += i
        i -= 1
    end
    evaluate_divisors(triangle_number)
end

# Evaluate how many divisors in the triangle number 
def evaluate_divisors(triangle_number)
    i = 1 
    divisors = [] 
        # Make use of the pairs that multiplied together equal the triangle number. 
        # Take 100. 1x100, 2x50, 4X25, 5x20, 10x10
        # This way, only have to iterate up to the square root of triangle number. 
        until i > Math.sqrt(triangle_number)
            if triangle_number % i == 0 
                divisors << i
                temp = triangle_number / i 
                # Prevent dups. Example 10x10 = 100.
                unless temp == i 
                    divisors << temp
                end 
            end
            i += 1
        end 
        
    if divisors.count > 500
        puts "#{triangle_number} is the first triangle number with more than 500 divisors."
        puts "Divisors count: #{divisors.count}"
        @solved = true 
    end 
    
end

until @solved == true 
    generate_triangle_number(@n)
    @n += 1
end


